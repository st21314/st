package com.itheima;

import java.io.*;
import java.net.*;
import java.util.Scanner;

/**
 * 第10题：使用TCP协议完成一个客户端一个服务器。客户端从键盘输入读取一个字符串，发送到服务器。
 * 服务器接收客户端发送的字符串，反转之后发回客户端。客户端接收并打印。
 * 
 * 思路：因条件限制，服务器使用本地连接（localhost），服务器与客户端用多线程方式在同一个终端运行。
 * 
 * @author one
 * 
 */
public class Test10 {
	public static void main(String[] args) {
		new Thread(new Server()).start(); // 启动服务器
		new Thread(new Client()).start(); // 启动客户端
	}
}

/**
 * 客户端类，接收输入并输出反转结果。实现Runnable接口以作为线程调用。
 * 
 * @author one
 * 
 */
class Client implements Runnable {
	public void run() {
		Socket socket = null;
		Scanner scanner = null;
		try {
			socket = new Socket("localhost", 10086); // 服务器使用localhost/127.0.0.1，端口定义10086
			scanner = new Scanner(System.in); // 定义Scanner接收键盘录入
			PrintWriter out = new PrintWriter(socket.getOutputStream(), true); // 定义PrintWriter用于向服务器发送数据
			BufferedReader in = new BufferedReader(new InputStreamReader(
					socket.getInputStream())); // 定义BufferedReader读取服务器返回的字符串

			String string = scanner.nextLine();// 客户端从键盘输入读取一个字符串
			out.println(string); // 把字符串发送到服务器
			String reString = in.readLine(); // 客户端接收并打印服务器发回的字符串
			System.out.println("服务端传回反转后的字符串:\t" + reString);
		} catch (Exception e) {
			e.printStackTrace(); // 异常处理，打印错误路径
		} finally { // 关闭资源
			if (scanner != null) {
				scanner.close();
			}
			if (socket != null) {
				try {
					socket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}

/**
 * 服务器类，接收字符串并返回反转后的字符串。实现Runnable接口以作为线程调用。
 * 
 * @author one
 * 
 */
class Server implements Runnable {
	public void run() {
		ServerSocket server = null;
		Socket socket = null;
		try {
			server = new ServerSocket(10086); // 定义服务器，端口定义10086
			socket = server.accept(); // 获取socket对象
			BufferedReader in = new BufferedReader(new InputStreamReader(
					socket.getInputStream())); // 定义BufferedReader用于读取客户端传入的字符串
			PrintWriter out = new PrintWriter(socket.getOutputStream(), true); // 定义PrintWriter用于向客户端发送数据

			String ip = socket.getInetAddress().getHostAddress(); // 获取客户端IP（本例为127.0.0.1）
			System.out.println(ip + "has connected");

			String line = in.readLine(); // 接收客户端传入的字符串
			System.out.println(ip + "发来字符串：\t" + line);
			String reString = new StringBuilder(line).reverse().toString(); // 得到反转字符串
			out.println(reString); // 返回反转后的字符串至客户端
		} catch (Exception e) {
			e.printStackTrace(); // 异常处理，打印错误路径
		} finally { // 关闭资源
			if (server != null) {
				try {
					server.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (socket != null) {
				try {
					socket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}