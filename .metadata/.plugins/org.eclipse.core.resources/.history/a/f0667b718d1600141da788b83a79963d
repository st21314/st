package com.itheima;

import java.io.*;
import java.net.*;

/**
 * 第10题：使用TCP协议完成一个客户端一个服务器。客户端从键盘输入读取一个字符串，发送到服务器。
 * 服务器接收客户端发送的字符串，反转之后发回客户端。客户端接收并打印。
 * 
 * 思路：因条件限制，服务器使用本地连接（localhost），服务器与客户端用多线程方式在同一个终端运行。
 * 运行后客户端循环接收输入并输出反转结果，服务器返回所接收的字符串的反转结果。 客户端输入end停止服务。
 * 
 * @author one
 * 
 */
public class Test10 {
	public static void main(String[] args) {
		new Thread(new Server()).start(); // 启动服务器
		new Thread(new Client()).start(); // 启动客户端
	}
}

/**
 * 客户端类，实现Runnable接口以作为线程调用
 * 
 * @author one
 * 
 */
class Client implements Runnable {
	public void run() {
		Socket socket = null;
		try {
			socket = new Socket("localhost", 10086); // 服务器使用localhost/127.0.0.1
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					System.in));
			PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
			BufferedReader in = new BufferedReader(new InputStreamReader(
					socket.getInputStream()));

			String string = null;
			while (!(string = reader.readLine()).equals("end")) { // 客户端从键盘输入读取一个字符串
				out.println(string); // 把字符串发送到服务器
				String reString = in.readLine(); // 客户端接收并打印服务器发回的字符串
				System.out.println("服务端传回反转后的字符串::" + reString);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (socket != null) {
				try {
					socket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}

/**
 * 服务器类，实现Runnable接口以作为线程调用
 * 
 * @author one
 * 
 */
class Server implements Runnable {
	public void run() {
		ServerSocket server = null;
		Socket socket = null;
		try {
			server = new ServerSocket(10086);
			socket = server.accept();
			BufferedReader in = new BufferedReader(new InputStreamReader(
					socket.getInputStream()));
			PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

			String ip = socket.getInetAddress().getHostName();
			System.out.println(ip + "...connect");
			String line = null;
			while ((line = in.readLine()) != null) {

				System.out.println(ip + "发来字符串：" + line);
				String reString = new StringBuilder(line).reverse().toString();
				out.println(reString);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (server != null) {
				try {
					server.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (socket != null) {
				try {
					socket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}