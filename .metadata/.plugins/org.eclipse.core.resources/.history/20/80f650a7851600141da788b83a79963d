package com.itheima;

import java.io.*;
import java.net.*;
import java.util.Scanner;

/**
 * 第10题：使用TCP协议完成一个客户端一个服务器。客户端从键盘输入读取一个字符串，发送到服务器。
 * 服务器接收客户端发送的字符串，反转之后发回客户端。客户端接收并打印。
 * 
 * @author one
 * 
 */
public class Test10 {
	public static void main(String[] args) {
		System.out.println("Go");
		new Thread(new Server()).start();
		new Thread(new Client()).start();
	}
}

class Client implements Runnable {
	public void run(){
		Socket socket = null;
		Scanner scanner = null;
		try {
			socket = new Socket("localhost", 10086);
			BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
			PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
			BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			
			String string = null;
			while(!(string = reader.readLine()).equals("end")){
				out.println(string);
				String reString = in.readLine();
				System.out.println("服务端传回反转后的字符串::"+reString);
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally{
			if (scanner!=null) {
				System.out.println("scanner.close();");
				scanner.close();
			}
			if(socket!=null){
				try {
					System.out.println("socket.close();");
					socket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}

class Server implements Runnable {
	public void run() {
		ServerSocket server = null;
		Socket socket = null;
		try {
			server = new ServerSocket(10086);
			socket = server.accept();
			BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
			
			String ip = socket.getInetAddress().getHostAddress();
			System.out.println(ip+"...connect");
			String line = null;
			while((line = in.readLine())!=null){
				
				System.out.println(ip+"发来字符串："+line);
				String reString = new StringBuilder(line).reverse().toString();
				out.println(reString);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally{
			if (server!=null) {
				try {
					System.out.println("server.close();");
					server.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if(socket!=null){
				try {
					System.out.println("SER::socket.close();");
					socket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}